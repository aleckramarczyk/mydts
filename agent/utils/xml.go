package utils

import (
	"encoding/xml"
	"io"
	"os"
)

// applicationState XML structs were generated by the miku/zek library. Many thanks to it's contributors
type applicationState struct {
	XMLName                   xml.Name `xml:"ApplicationState"`
	Text                      string   `xml:",chardata"`
	Xsi                       string   `xml:"xsi,attr"`
	Xsd                       string   `xml:"xsd,attr"`
	LastBackOfficeMessageId   string   `xml:"LastBackOfficeMessageId"`
	LastUeDeltaMessageId      string   `xml:"LastUeDeltaMessageId"`
	LastFileUploadMessageId   string   `xml:"LastFileUploadMessageId"`
	LastFileDownloadMessageId string   `xml:"LastFileDownloadMessageId"`
	AuthorizeForm             struct {
		Text     string `xml:",chardata"`
		Settings struct {
			Text   string   `xml:",chardata"`
			String []string `xml:"string"`
		} `xml:"Settings"`
	} `xml:"AuthorizeForm"`
	ColorState struct {
		Text      string `xml:",chardata"`
		ThemeName string `xml:"ThemeName"`
	} `xml:"ColorState"`
}

func getByteValue(path string) ([]byte, error) {
	xmlFile, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer xmlFile.Close()

	byteValue, err := io.ReadAll(xmlFile)
	if err != nil {
		return nil, err
	}
	return byteValue, nil
}

func ReadApplicationState(u *Unit) error {
	byteValue, err := getByteValue(AgentConfig.ApplicationStatePath)
	asd := &applicationState{}
	err = xml.Unmarshal(byteValue, asd)
	if err != nil {
		return err
	}

	u.UnitId = asd.AuthorizeForm.Settings.String[0]
	u.UnitName = asd.AuthorizeForm.Settings.String[1]
	u.VehicleID = asd.AuthorizeForm.Settings.String[2]
	return nil
}

/*
// gps Generated by the miku/zek library, holds data that is unmarshalled from an Intergraph generated
// GPS file.
type gps struct {
	XMLName      xml.Name `xml:"GPS"`
	Text         string   `xml:",chardata"`
	FTYPBACKDATE string   `xml:"FTYP_BACKDATE"`
	FTYPHOSTNAME string   `xml:"FTYP_HOSTNAME"`
	FTYPLOCALIP  string   `xml:"FTYP_LOCALIP"`
	FTYPREQMDTID string   `xml:"FTYP_REQMDTID"`
	FTYPVEHICID  string   `xml:"FTYP_VEHICID"`
	Avl          string   `xml:"Avl"`
}

// ReadGPSInformation Receives the path to an XML file generated by Intergraph and parses it
// for gps information. Returns the latitude and longitude converted from its original GPRMC
// format.
func ReadGPSInformation(path string) (longitude float64, latitude float64, err error) {
	byteValue, err := getByteValue(path)
	if err != nil {
		return 0, 0, err
	}
	gpsXML := gps{}
	err = xml.Unmarshal(byteValue, &gpsXML)
	if err != nil {
		return 0, 0, err
	}

	gprmc := strings.Split(gpsXML.Avl, ",")
	_, longitude, latitude, err = ConvertGPRMC(gprmc)
	if err != nil {
		log.Println(err)
		return 0, 0, err
	}

	return longitude, latitude, nil
}
*/

type authorize struct {
	XMLName       xml.Name `xml:"Authorize"`
	Text          string   `xml:",chardata"`
	FTYPBACKDATE  string   `xml:"FTYP_BACKDATE"`
	FTYPHOSTNAME  string   `xml:"FTYP_HOSTNAME"`
	FTYPLOCALIP   string   `xml:"FTYP_LOCALIP"`
	FTYPREQMDTID  string   `xml:"FTYP_REQMDTID"`
	FTYPVEHICID   string   `xml:"FTYP_VEHICID"`
	FTYPUSERID    string   `xml:"FTYP_USERID"`
	FTYPPSWRD     string   `xml:"FTYP_PSWRD"`
	FTYPUNID      string   `xml:"FTYP_UNID"`
	FTYPCARID     string   `xml:"FTYP_CARID"`
	FTYPGPSTRKABL string   `xml:"FTYP_GPSTRKABL"`
	FTYPGPSPROTO  string   `xml:"FTYP_GPSPROTO"`
}

func ReadAuthorizeInformation(u *Unit, path string) error {
	byteValue, err := getByteValue(path)
	if err != nil {
		return err
	}
	auth := &authorize{}
	err = xml.Unmarshal(byteValue, auth)
	if err != nil {
		return err
	}

	u.UnitId = auth.FTYPUNID
	u.UnitName = auth.FTYPUSERID
	u.VehicleID = auth.FTYPCARID
	u.SignedOn = true

	return nil
}
